from openai import OpenAI
from companion_traits import CompanionTraits
from user_info import UserInfo
from scenario import Scenario
from bonding import Bonding

class Chat:
    OPENAI_BASE_URL = "http://localhost:1234/v1"
    OPENAI_API_KEY = "lm-studio"
    MODEL_NAME = "gpt-4o"

    def __init__(self, companion_traits: CompanionTraits, user_info: UserInfo, scenario: Scenario, bonding: Bonding):
        """
        Initialize the Chat class with companion traits, user info, scenario, and bonding level.
        """
        self.companion_traits = companion_traits
        self.user_info = user_info
        self.scenario = scenario
        self.bonding = bonding
        self.openai_client = OpenAI(base_url=self.OPENAI_BASE_URL, api_key=self.OPENAI_API_KEY)

    def get_completion(self, messages):
        """
        Get a chat completion from the OpenAI client using the model name and messages.
        
        Args:
            messages (list): The list of message dictionaries for the chat history.
            
        Returns:
            str: The response message content from the AI model.
        """
        try:
            completion = self.openai_client.chat.completions.create(
                model=self.MODEL_NAME,
                messages=messages
            )
            return completion.choices[0].message.content
        except Exception as e:
            return f"Error during completion: {e}"

    def build_system_message(self):
        """
        Build the system message based on companion traits, user info, scenario, and bonding level.
        
        Returns:
            str: The system message for initializing the chat.
        """
        return f"""
        You are a companion AI with the following traits:
        {self.companion_traits.traits}
        
        You are interacting with a user who has the following profile:
        {self.user_info.info}
        
        The current roleplay scenario is:
        {self.scenario.scenario}
        
        The current bonding level between you and the user is: {self.bonding.level}/10
        
        Adjust your responses according to your traits, the user's info, the given scenario, and the bonding level. 
        Maintain your character and role throughout the interaction.
        """

    def chatbot(self, message, history):
        """
        Generate a response from the chatbot based on user input and history.
        
        Args:
            message (str): The latest message from the user.
            history (list): A list of tuples containing previous messages and responses.
        
        Returns:
            str: The response generated by the AI model.
        """
        system_message = self.build_system_message()
        messages = [{"role": "system", "content": system_message}]

        for human, assistant in history:
            messages.append({"role": "user", "content": human})
            messages.append({"role": "assistant", "content": assistant})

        messages.append({"role": "user", "content": message})

        return self.get_completion(messages)
